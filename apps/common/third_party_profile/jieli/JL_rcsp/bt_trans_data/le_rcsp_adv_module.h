// binary representation
// attribute size in bytes (16), flags(16), handle (16), uuid (16/128), value(...)

#ifndef _LE_SERVER_MODULE_H
#define _LE_SERVER_MODULE_H

#include <stdint.h>
#include "bt_common.h"
#if (TCFG_BLE_DEMO_SELECT == DEF_BLE_DEMO_ADV_RCSP)
//
// gatt profile include file, generated by jieli gatt_inc_generator.exe
//
static const uint8_t profile_data[] = {
     //////////////////////////////////////////////////////
    //
    // 0x0001 PRIMARY_SERVICE  00000104-0000-1000-8000-00805f9b34fb
    //
    //////////////////////////////////////////////////////
    0x18, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x28, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00,

     /* CHARACTERISTIC,  00000104-A801-1000-8000-00805f9b34fb, WRITE_WITHOUT_RESPONSE | DYNAMIC, */
    // 0x0002 CHARACTERISTIC 00000104-A801-1000-8000-00805f9b34fb WRITE_WITHOUT_RESPONSE | DYNAMIC 
    0x1b, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x28, 0x04, 0x03, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x01, 0xa8, 0x04, 0x01, 0x00, 0x00,
    // 0x0003 VALUE 00000104-A801-1000-8000-00805f9b34fb WRITE_WITHOUT_RESPONSE | DYNAMIC  
    0x16, 0x00, 0x04, 0x03, 0x03, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x01, 0xa8, 0x04, 0x01, 0x00, 0x00,

     /* CHARACTERISTIC,  00000104-A802-1000-8000-00805f9b34fb, NOTIFY, */
    // 0x0004 CHARACTERISTIC 00000104-A802-1000-8000-00805f9b34fb NOTIFY 
    0x1b, 0x00, 0x02, 0x00, 0x04, 0x00, 0x03, 0x28, 0x10, 0x05, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x02, 0xa8, 0x04, 0x01, 0x00, 0x00,
    // 0x0005 VALUE 00000104-A802-1000-8000-00805f9b34fb NOTIFY  
    0x16, 0x00, 0x10, 0x02, 0x05, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x02, 0xa8, 0x04, 0x01, 0x00, 0x00,
    // 0x0006 CLIENT_CHARACTERISTIC_CONFIGURATION 
    0x0a, 0x00, 0x0a, 0x01, 0x06, 0x00, 0x02, 0x29, 0x00, 0x00,

     /* CHARACTERISTIC,  00000104-A811-1000-8000-00805f9b34fb, READ | WRITE | WRITE_WITHOUT_RESPONSE | DYNAMIC, */
    // 0x0007 CHARACTERISTIC 00000104-A811-1000-8000-00805f9b34fb READ | WRITE | WRITE_WITHOUT_RESPONSE | DYNAMIC 
    0x1b, 0x00, 0x02, 0x00, 0x07, 0x00, 0x03, 0x28, 0x0e, 0x08, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x11, 0xa8, 0x04, 0x01, 0x00, 0x00,
    // 0x0008 VALUE 00000104-A811-1000-8000-00805f9b34fb READ | WRITE | WRITE_WITHOUT_RESPONSE | DYNAMIC  
    0x16, 0x00, 0x0e, 0x03, 0x08, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x11, 0xa8, 0x04, 0x01, 0x00, 0x00,

     /* CHARACTERISTIC,  00000104-A812-1000-8000-00805f9b34fb, READ | NOTIFY | DYNAMIC, */
    // 0x0009 CHARACTERISTIC 00000104-A812-1000-8000-00805f9b34fb READ | NOTIFY | DYNAMIC 
    0x1b, 0x00, 0x02, 0x00, 0x09, 0x00, 0x03, 0x28, 0x12, 0x0a, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x12, 0xa8, 0x04, 0x01, 0x00, 0x00,
    // 0x000a VALUE 00000104-A812-1000-8000-00805f9b34fb READ | NOTIFY | DYNAMIC  
    0x16, 0x00, 0x12, 0x03, 0x0a, 0x00, 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x12, 0xa8, 0x04, 0x01, 0x00, 0x00,
    // 0x000b CLIENT_CHARACTERISTIC_CONFIGURATION 
    0x0a, 0x00, 0x0a, 0x01, 0x0b, 0x00, 0x02, 0x29, 0x00, 0x00,

    // END
    0x00, 0x00, 
};
//
// characteristics <--> handles
//
#define ATT_CHARACTERISTIC_00000104_A801_1000_8000_00805f9b34fb_01_VALUE_HANDLE 0x0003
#define ATT_CHARACTERISTIC_00000104_A802_1000_8000_00805f9b34fb_01_VALUE_HANDLE 0x0005
#define ATT_CHARACTERISTIC_00000104_A802_1000_8000_00805f9b34fb_01_CLIENT_CONFIGURATION_HANDLE 0x0006
#define ATT_CHARACTERISTIC_00000104_A811_1000_8000_00805f9b34fb_01_VALUE_HANDLE 0x0008
#define ATT_CHARACTERISTIC_00000104_A812_1000_8000_00805f9b34fb_01_VALUE_HANDLE 0x000a
#define ATT_CHARACTERISTIC_00000104_A812_1000_8000_00805f9b34fb_01_CLIENT_CONFIGURATION_HANDLE 0x000b




#define JL_OPCODE_SET_ADV 							    0xC0
#define	JL_OPCODE_GET_ADV  								0xC1
#define JL_OPCODE_ADV_DEVICE_NOTIFY 					0xC2
#define JL_OPCODE_ADV_NOTIFY_SETTING 					0xC3
#define JL_OPCODE_ADV_DEVICE_REQUEST					0xC4

#define ATTR_TYPE_BAT_VALUE  		(0)
#define ATTR_TYPE_EDR_NAME   		(1)
#define ATTR_TYPE_KEY_SETTING  		(2)
#define ATTR_TYPE_LED_SETTING  		(3)
#define ATTR_TYPE_MIC_SETTING  		(4)
#define ATTR_TYPE_WORK_MODE  		(5)
#define ATTR_TYPE_PRODUCT_MESSAGE  	(6)
#define ATTR_TYPE_TIME_STAMP		(7)
#define ATTR_TYPE_EQ_SETTING		(8)
#define ATTR_TYPE_HIGH_LOW_VOL		(9)
#define ATTR_TYPE_ANC_VOICE_KEY		(10)
#define ATTR_TYPE_ANC_VOICE			(11)
#define ATTR_TYPE_ASSISTED_HEARING	(12)

//rcsp功能模块使能
#define RCSP_ADV_NAME_SET_ENABLE        1
#define RCSP_ADV_KEY_SET_ENABLE         1
#define RCSP_ADV_LED_SET_ENABLE         1
#define RCSP_ADV_MIC_SET_ENABLE         0
#define RCSP_ADV_WORK_SET_ENABLE        0
#define RCSP_ADV_HALTER_ENABLE			0
#if (JL_EARPHONE_APP_EN)
#define RCSP_ADV_EQ_SET_ENABLE          1
#define RCSP_ADV_MUSIC_INFO_ENABLE      1
#define RCSP_ADV_HIGH_LOW_SET			1
#define RCSP_ADV_FIND_DEVICE_ENABLE     1
#define RCSP_ADV_ANC_VOICE     			1
#define RCSP_ADV_ASSISTED_HEARING		1
#else
#define RCSP_ADV_EQ_SET_ENABLE          0
#define RCSP_ADV_MUSIC_INFO_ENABLE      0
#define RCSP_ADV_HIGH_LOW_SET			0
#define RCSP_ADV_FIND_DEVICE_ENABLE     0
#define RCSP_ADV_ANC_VOICE     			0
#define RCSP_ADV_ASSISTED_HEARING		0
#endif
#define RCSP_ADV_PRODUCT_MSG_ENABLE     1

enum {
    BT_ADV_ENABLE,
    BT_ADV_DISABLE,
    BT_ADV_SET_EDR_CON_FLAG,
    BT_ADV_SET_BAT_CHARGE_L,
    BT_ADV_SET_BAT_CHARGE_R,
    BT_ADV_SET_BAT_CHARGE_C,
    BT_ADV_SET_BAT_PERCENT_L,
    BT_ADV_SET_BAT_PERCENT_R,
    BT_ADV_SET_BAT_PERCENT_C,
    BT_ADV_SET_NOTIFY_EN,
};

// BT_ADV_SET_EDR_CON_FLAG
#define SECNE_DISMISS			(0x00)
#define SECNE_UNCONNECTED		(0x01)
#define SECNE_CONNECTED			(0x02)
#define SECNE_CONNECTING		(0x03)
#define SECNE_CONNECTINLESS		(0x04)

#define TWS_FUNC_ID_SEQ_RAND_SYNC	(('S' << (3 * 8)) | ('E' << (2 * 8)) | ('Q' << (1 * 8)) | ('\0'))

enum {
    TWS_ADV_SEQ_CHANGE = 0,
    TWS_VERSON_INFO,
    TWS_UPDATE_INFO,
};

extern int  bt_ble_adv_ioctl(u32 cmd, u32 priv, u8 mode);
extern void bt_adv_seq_change(void);
void ble_app_disconnect(void);
void bt_ble_rcsp_adv_enable(void);
void bt_ble_rcsp_adv_disable(void);
u8 get_ble_adv_notify(void);
void set_ble_adv_notify(u8 en);
u8 get_connect_flag(void);
void set_connect_flag(u8 value);
void ble_module_enable(u8 en);
void bt_adv_get_bat(u8 *buf);
#endif
#endif
